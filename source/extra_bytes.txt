Extra Bytes (optional)
................................................................................

+---------------------+-----------------------------+
| **User ID**         | **LASF_Spec**               |
+---------------------+-----------------------------+
| Record ID           | 4                           |
+---------------------+-----------------------------+
| Record Length after | n records * 192 bytes       |
| Header              |                             |
+---------------------+-----------------------------+

The Extra Bytes VLR provides a mechanism whereby additional information can be
added to the end of a standard Point Record. This VLR has been added to LAS 1.4
to formalize a process that has been used in prior versions of LAS. It is
envisioned that software that is not cognizant of the meaning of the extra
bytes will simply copy these bytes when manipulating files.

This record is only needed for LAS files where points contain user-defined
"extra bytes". This happens when the point record size is set to a larger value
than required by the point type. For example, when a LAS file that contains
point type 1 has a point record size of 32 instead of 28 there are 4 "extra
bytes". The Extra Bytes VLR contains a simple description of the type and the
meaning of these "extra bytes" so they can be accessed in a consistent manner
across applications. The 4 "extra bytes" could, for example, be of data_type 9
- a floating point value - that specifies an "echo width" for each return. In
this case there would be one EXTRA_BYTES struct in the payload of this VLR. An
example with two EXTRA_BYTES struct in the payload are 14 "extra bytes" that
have data type 29 - a floating point vector of length 3 - followed by data type
3 - an unsigned short - that specify the "laser pulse direction" and a
"normalized reflectivity".

The "extra bytes" are made accessible via a unique name. The "name" field
distinguishes the additional point attributes that a LIDAR software may add to
the points in a LAS file so they can be accessed later in a consistent manner
by another software. Descriptive names such as "normalized reflectivity", "echo
width", or "shading normal" are encouraged. The use of generic names such as
"variable1" or "temp1" is discouraged.

The bit mask in the options field specifies whether the min and max range of
the value have been set (i.e. are meaningful), whether the scale and/or offset
values are set with which the "extra bytes" are to be multiplied and translated
to compute their actual value, and whether there is a special value that should
be interpreted as NO_DATA. By default all bits are zero which means that the
values in the corresponding fields are to be disregarded.

If the selected data_type is less than 8 bytes, the no_data, min, and max field
should be upcast into 8-byte storage. For any float these 8 bytes would be
upcast to a double, for any unsigned char, unsigned short, or unsigned long
they would be upcast to an unsigned long long and for any char, short, or long,
they would be upcast to a long long.

::

    struct EXTRA_BYTES {
        unsigned char           reserved[2];     // 2 bytes
        unsigned char           data_type;       // 1 byte
        unsigned char           options;         // 1 byte
        char                    name[32];        // 32 bytes
        unsigned char           unused[4];       // 4 bytes
        anytype                 no_data[3];      // 24 = 3*8 bytes
        anytype                 min[3];          // 24 = 3*8 bytes
        anytype                 max[3];          // 24 = 3*8 bytes
        double                  scale[3];        // 24 = 3*8 bytes
        double                  offset[3];       // 24 = 3*8 bytes
        char                    description[32]; // 32 bytes
    };                                           // total of 192 bytes

The "reserved" field and the "unused" field must be set to zero. Any unused
"no_data", "min", "max", "scale", or "offset" fields must be set to zero. Any
unused characters in the "name" or "description" fields must be set to zero.


.. tabularcolumns:: |p{3.0cm}|p{5.0cm}|p{4.0cm}|

.. table:: Values for ``data_type`` Field

    +-------------------------------+-------------------------------+-------------------+
    | **Value**                     | **Meaning**                   | **Value**         |
    +===============================+===============================+===================+
    | 0                             | undocumented extra bytes      | specify value in  |
    |                               |                               | ``options`` field |
    +-------------------------------+-------------------------------+-------------------+
    | 1                             | unsigned char                 | 1 byte            |
    +-------------------------------+-------------------------------+-------------------+
    | 2                             | char                          | 1 byte            |
    +-------------------------------+-------------------------------+-------------------+
    | 3                             | unsigned short                | 2 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 4                             | short                         | 2 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 5                             | unsigned long                 | 4 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 6                             | long                          | 4 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 7                             | unsigned long long            | 8 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 8                             | long long                     | 8 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 9                             | float                         | 4 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 10                            | double                        | 8 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 11                            | unsigned char[2]              | 2 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 12                            | char[2]                       | 2 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 13                            | unsigned short[2]             | 4 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 14                            | short[2]                      | 4 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 15                            | unsigned long[2]              | 8 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 16                            | long[2]                       | 8 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 17                            | unsigned long long[2]         | 16 bytes          |
    +-------------------------------+-------------------------------+-------------------+
    | 18                            | long long[2]                  | 16 bytes          |
    +-------------------------------+-------------------------------+-------------------+
    | 19                            | float[2]                      | 8 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 20                            | double[2]                     | 16 bytes          |
    +-------------------------------+-------------------------------+-------------------+
    | 21                            | unsigned char[3]              | 3 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 22                            | char[3]                       | 3 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 23                            | unsigned short[3]             | 6 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 24                            | short[3]                      | 6 bytes           |
    +-------------------------------+-------------------------------+-------------------+
    | 25                            | unsigned long[3]              | 12 bytes          |
    +-------------------------------+-------------------------------+-------------------+
    | 26                            | long[3]                       | 12 bytes          |
    +-------------------------------+-------------------------------+-------------------+
    | 27                            | unsigned long long[3]         | 24 bytes          |
    +-------------------------------+-------------------------------+-------------------+
    | 28                            | long long[3]                  | 24 bytes          |
    +-------------------------------+-------------------------------+-------------------+
    | 29                            | float[3]                      | 12 bytes          |
    +-------------------------------+-------------------------------+-------------------+
    | 30                            | double[3]                     | 24 bytes          |
    +-------------------------------+-------------------------------+-------------------+


.. tabularcolumns:: |p{2.0cm}|p{6.0cm}|p{8.5cm}|

.. table:: Encoding of ``options`` Bit Field

    +-----------+-------------------------+------------------------------------------+
    | **Bits**  |  **Field Name**         | **Description**                          |
    +===========+=========================+==========================================+
    | 0         | no_data_bit             | If set the no_data value is relevant.    |
    +-----------+-------------------------+------------------------------------------+
    | 1         | min_bit                 | If set the min value is relevant         |
    +-----------+-------------------------+------------------------------------------+
    | 2         | max_bit                 | If set the max value is relevant         |
    +-----------+-------------------------+------------------------------------------+
    | 3         | scale_bit               | If set each value should be multiplied   |
    |           |                         | by the corresponding scale value (before |
    |           |                         | applying the offset)                     |
    +-----------+-------------------------+------------------------------------------+
    | 4         | offset_bit              | If set each value should be translated   |
    |           |                         | by the corresponding offset value (after |
    |           |                         | applying the scaling).                   |
    +-----------+-------------------------+------------------------------------------+


